
pwmfast_song.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800260  00800260  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000939  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000171  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "tone_pwm.h"
#include "music.h"

int main(void)
{
	delay_init();
  a6:	0e 94 a9 00 	call	0x152	; 0x152 <delay_init>
    while (1) 
    {
		for (int i=0;i<sizeof(melody)/sizeof(melody[0]);i++)
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	1c c0       	rjmp	.+56     	; 0xe8 <main+0x42>
		{
			int freq = melody[i];
  b0:	9e 01       	movw	r18, r28
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	f9 01       	movw	r30, r18
  b8:	e0 55       	subi	r30, 0x50	; 80
  ba:	fe 4f       	sbci	r31, 0xFE	; 254
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
			int duration = noteDuration[i];
  c0:	f9 01       	movw	r30, r18
  c2:	e0 50       	subi	r30, 0x00	; 0
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	00 81       	ld	r16, Z
  c8:	11 81       	ldd	r17, Z+1	; 0x01
			
			if(freq!=0) {
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	39 f0       	breq	.+14     	; 0xdc <main+0x36>
				tone(freq,50);
  ce:	62 e3       	ldi	r22, 0x32	; 50
  d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <tone>
				delay(duration);
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 bd 00 	call	0x17a	; 0x17a <delay>
  da:	05 c0       	rjmp	.+10     	; 0xe6 <main+0x40>
			} else {
				no_tone();
  dc:	0e 94 20 01 	call	0x240	; 0x240 <no_tone>
				delay(duration);
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 bd 00 	call	0x17a	; 0x17a <delay>
int main(void)
{
	delay_init();
    while (1) 
    {
		for (int i=0;i<sizeof(melody)/sizeof(melody[0]);i++)
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	c8 35       	cpi	r28, 0x58	; 88
  ea:	d1 05       	cpc	r29, r1
  ec:	08 f3       	brcs	.-62     	; 0xb0 <main+0xa>
  ee:	dd cf       	rjmp	.-70     	; 0xaa <main+0x4>

000000f0 <__vector_7>:
#include <avr/io.h>

volatile uint16_t count;
volatile uint16_t delay_done = 0;

ISR(TIMER2_COMPA_vect) {
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	count--;
 102:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <count>
 106:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <count+0x1>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <count+0x1>
 110:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <count>
	if (count==0) {
 114:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <count>
 118:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <count+0x1>
 11c:	89 2b       	or	r24, r25
 11e:	81 f4       	brne	.+32     	; 0x140 <__vector_7+0x50>
		delay_done = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
 128:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
		TIMSK2 &= ~(1<<OCIE2A);
 12c:	e0 e7       	ldi	r30, 0x70	; 112
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	80 83       	st	Z, r24
		TCCR2B &= ~((1<<CS22)|(1<<CS01)|(1<<CS00));
 136:	e1 eb       	ldi	r30, 0xB1	; 177
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 7f       	andi	r24, 0xF8	; 248
 13e:	80 83       	st	Z, r24
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <delay_init>:

void delay_init(void) {
	TCCR2A |= (1<<WGM21);
 152:	e0 eb       	ldi	r30, 0xB0	; 176
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
 15c:	e1 eb       	ldi	r30, 0xB1	; 177
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
	OCR2A = 249;
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1<<OCIE2A);
 16c:	e0 e7       	ldi	r30, 0x70	; 112
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
	sei();
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <delay>:
}

void delay(uint16_t ms) {
	count = ms;
 17a:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <count+0x1>
 17e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <count>
	delay_done = 0;
 182:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__data_end+0x1>
 186:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__data_end>
	
	TCCR2B |= (1<<CS22);
 18a:	e1 eb       	ldi	r30, 0xB1	; 177
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
 194:	e0 e7       	ldi	r30, 0x70	; 112
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 83       	st	Z, r24
	
	while(!delay_done);
 19e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
 1a2:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__data_end+0x1>
 1a6:	89 2b       	or	r24, r25
 1a8:	d1 f3       	breq	.-12     	; 0x19e <delay+0x24>
	
 1aa:	08 95       	ret

000001ac <tone>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include "tone_pwm.h"
#include "notes.h"

void tone(uint16_t freq,uint8_t duty) {
 1ac:	cf 93       	push	r28
 1ae:	9c 01       	movw	r18, r24
 1b0:	c6 2f       	mov	r28, r22
	DDRB |= (1<<DDB1);
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1<<COM1A1);
 1b8:	a0 e8       	ldi	r26, 0x80	; 128
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	8c 91       	ld	r24, X
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11);
 1c2:	e1 e8       	ldi	r30, 0x81	; 129
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
 1cc:	8c 91       	ld	r24, X
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13 | 1<<WGM12);
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
	
	ICR1 = (F_CPU/(freq*8UL))-1;
 1d8:	c9 01       	movw	r24, r18
 1da:	a0 e0       	ldi	r26, 0x00	; 0
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	aa 1f       	adc	r26, r26
 1e4:	bb 1f       	adc	r27, r27
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	aa 1f       	adc	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	9c 01       	movw	r18, r24
 1f0:	ad 01       	movw	r20, r26
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	44 1f       	adc	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	74 e2       	ldi	r23, 0x24	; 36
 1fe:	84 ef       	ldi	r24, 0xF4	; 244
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 28 01 	call	0x250	; 0x250 <__udivmodsi4>
 206:	21 50       	subi	r18, 0x01	; 1
 208:	31 09       	sbc	r19, r1
 20a:	e6 e8       	ldi	r30, 0x86	; 134
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	31 83       	std	Z+1, r19	; 0x01
 210:	20 83       	st	Z, r18
	OCR1A = (ICR1*duty)/100;
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	c8 9f       	mul	r28, r24
 218:	90 01       	movw	r18, r0
 21a:	c9 9f       	mul	r28, r25
 21c:	30 0d       	add	r19, r0
 21e:	11 24       	eor	r1, r1
 220:	36 95       	lsr	r19
 222:	27 95       	ror	r18
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	ab e7       	ldi	r26, 0x7B	; 123
 22a:	b4 e1       	ldi	r27, 0x14	; 20
 22c:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 238:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <no_tone>:

void no_tone() {
	TCCR1A = 0;
 240:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 244:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	PORTB &= ~(1<<PORTB1);
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	08 95       	ret

00000250 <__udivmodsi4>:
 250:	a1 e2       	ldi	r26, 0x21	; 33
 252:	1a 2e       	mov	r1, r26
 254:	aa 1b       	sub	r26, r26
 256:	bb 1b       	sub	r27, r27
 258:	fd 01       	movw	r30, r26
 25a:	0d c0       	rjmp	.+26     	; 0x276 <__udivmodsi4_ep>

0000025c <__udivmodsi4_loop>:
 25c:	aa 1f       	adc	r26, r26
 25e:	bb 1f       	adc	r27, r27
 260:	ee 1f       	adc	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	a2 17       	cp	r26, r18
 266:	b3 07       	cpc	r27, r19
 268:	e4 07       	cpc	r30, r20
 26a:	f5 07       	cpc	r31, r21
 26c:	20 f0       	brcs	.+8      	; 0x276 <__udivmodsi4_ep>
 26e:	a2 1b       	sub	r26, r18
 270:	b3 0b       	sbc	r27, r19
 272:	e4 0b       	sbc	r30, r20
 274:	f5 0b       	sbc	r31, r21

00000276 <__udivmodsi4_ep>:
 276:	66 1f       	adc	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	1a 94       	dec	r1
 280:	69 f7       	brne	.-38     	; 0x25c <__udivmodsi4_loop>
 282:	60 95       	com	r22
 284:	70 95       	com	r23
 286:	80 95       	com	r24
 288:	90 95       	com	r25
 28a:	9b 01       	movw	r18, r22
 28c:	ac 01       	movw	r20, r24
 28e:	bd 01       	movw	r22, r26
 290:	cf 01       	movw	r24, r30
 292:	08 95       	ret

00000294 <__umulhisi3>:
 294:	a2 9f       	mul	r26, r18
 296:	b0 01       	movw	r22, r0
 298:	b3 9f       	mul	r27, r19
 29a:	c0 01       	movw	r24, r0
 29c:	a3 9f       	mul	r26, r19
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	b2 9f       	mul	r27, r18
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
