
pwm_motor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022f  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033c  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
    DDRD |= (1<<DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<DDB1) | (1<<DDB2) | (1<<DDB3)  | (1<<DDB4) );
  86:	84 b1       	in	r24, 0x04	; 4
  88:	81 7e       	andi	r24, 0xE1	; 225
  8a:	84 b9       	out	0x04, r24	; 4
	// enabling pull up registers to avoid floating values in input
	PORTB |= ((1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB4));			
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	8e 61       	ori	r24, 0x1E	; 30
  90:	85 b9       	out	0x05, r24	; 5
	
	// for fast PWM mode set bits WGM00 and WGM01 of TCCR0A register.
	TCCR0A |= (1<<WGM00);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	84 bd       	out	0x24, r24	; 36
	// set COM0A1 bit of TCCR0B register for non-inverting PWM signal
	TCCR0A |= (1<<COM0A1);
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);		// CLKpwm = (CLK)/(n X 256) ; n = prescalar
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);		// here n = 64
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bd       	out	0x25, r24	; 37
	while(1) {
		if(!(PINB & (1<<PINB1))) {
  b0:	19 99       	sbic	0x03, 1	; 3
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x3a>
			OCR0A = 64;	
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 bd       	out	0x27, r24	; 39
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <main+0x30>
		} else if (!(PINB & (1<<PINB2)))
  ba:	1a 99       	sbic	0x03, 2	; 3
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <main+0x44>
		{
			OCR0A = 128;
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	87 bd       	out	0x27, r24	; 39
  c2:	f6 cf       	rjmp	.-20     	; 0xb0 <main+0x30>
		} else if (!(PINB & (1<<PINB3)))
  c4:	1b 99       	sbic	0x03, 3	; 3
  c6:	03 c0       	rjmp	.+6      	; 0xce <main+0x4e>
		{
			OCR0A = 192;
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	87 bd       	out	0x27, r24	; 39
  cc:	f1 cf       	rjmp	.-30     	; 0xb0 <main+0x30>
		} else if (!(PINB & (1<<PINB4)))
  ce:	1c 99       	sbic	0x03, 4	; 3
  d0:	ef cf       	rjmp	.-34     	; 0xb0 <main+0x30>
		{
			OCR0A = 255;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	87 bd       	out	0x27, r24	; 39
  d6:	ec cf       	rjmp	.-40     	; 0xb0 <main+0x30>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
