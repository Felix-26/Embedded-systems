
Modular_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "my_delay.h"
#include <stdint.h>

int main(void)
{
    DDRB |= (1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	timer0_init();
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <timer0_init>
    while (1) 
    {
		PORTB ^= (1<<PORTB5);
  8a:	95 b1       	in	r25, 0x05	; 5
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	89 27       	eor	r24, r25
  90:	85 b9       	out	0x05, r24	; 5
		delay(5000);
  92:	88 e8       	ldi	r24, 0x88	; 136
  94:	93 e1       	ldi	r25, 0x13	; 19
  96:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay>
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0xa>

0000009c <timer0_init>:
 *  Author: Felix Thomas
 */ 
#include <avr/io.h>
void timer0_init(void) {
	// to select CTC mode
	TCCR0A |= (1<<WGM01);
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 bd       	out	0x24, r24	; 36
	// count value
	OCR0A = 249;
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	87 bd       	out	0x27, r24	; 39
	// making counter 0
	TCNT0 = 0;
  a6:	16 bc       	out	0x26, r1	; 38
	// pre-scalar 64
	TCCR0B |= ( 1<<CS00 | 1<<CS01 );
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
	// setting flag bit 0
	TIFR0 |= (1<<OCF0A);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	08 95       	ret

000000b6 <delay>:
}

void delay(uint16_t ms){
	// count for ms times
	while(ms--) {
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <delay+0xe>
		// checking if OCF0A flag is set or not
		while(!(TIFR0 & (1<<OCF0A)));
  b8:	a9 9b       	sbis	0x15, 1	; 21
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <delay+0x2>
		TIFR0 |= (1<<OCF0A);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	85 bb       	out	0x15, r24	; 21
	TIFR0 |= (1<<OCF0A);
}

void delay(uint16_t ms){
	// count for ms times
	while(ms--) {
  c2:	c9 01       	movw	r24, r18
  c4:	9c 01       	movw	r18, r24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	89 2b       	or	r24, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <delay+0x2>
		// checking if OCF0A flag is set or not
		while(!(TIFR0 & (1<<OCF0A)));
		TIFR0 |= (1<<OCF0A);
		
	}
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
