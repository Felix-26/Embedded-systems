
LM35_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000077e  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe1  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000907  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073c  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000499  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c2  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000353b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  8e:	0c 94 bd 03 	jmp	0x77a	; 0x77a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:

#define F_CPU 16000000UL
#include <avr/io.h>

void adc_init(void) {
	ADMUX = ( 1<<REFS0);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0); // PRESCALAR 128
  a4:	80 81       	ld	r24, Z
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <adc_read>:
}

uint16_t adc_read(uint16_t channel) {
	channel &= 0x07;
  ac:	87 70       	andi	r24, 0x07	; 7
  ae:	99 27       	eor	r25, r25
	ADCSRA |= 1<<ADSC;
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	90 64       	ori	r25, 0x40	; 64
  b8:	90 83       	st	Z, r25
	ADMUX = (ADMUX & 0XF8) | channel;
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	98 7f       	andi	r25, 0xF8	; 248
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
  c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ca:	86 fd       	sbrc	r24, 6
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <adc_read+0x1a>
	return (ADCL | (ADCH << 8));
  ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	98 2f       	mov	r25, r24
  da:	88 27       	eor	r24, r24
  dc:	82 2b       	or	r24, r18
  de:	08 95       	ret

000000e0 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_enable_pulse+0x8>
  ec:	00 00       	nop
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_enable_pulse+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_enable_pulse+0x1e>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <lcd_send_nibble>:
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	93 7c       	andi	r25, 0xC3	; 195
 106:	9b b9       	out	0x0b, r25	; 11
 108:	83 ff       	sbrs	r24, 3
 10a:	03 c0       	rjmp	.+6      	; 0x112 <lcd_send_nibble+0x10>
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	94 60       	ori	r25, 0x04	; 4
 110:	9b b9       	out	0x0b, r25	; 11
 112:	82 ff       	sbrs	r24, 2
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_send_nibble+0x1a>
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	81 ff       	sbrs	r24, 1
 11e:	03 c0       	rjmp	.+6      	; 0x126 <lcd_send_nibble+0x24>
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	90 61       	ori	r25, 0x10	; 16
 124:	9b b9       	out	0x0b, r25	; 11
 126:	80 ff       	sbrs	r24, 0
 128:	03 c0       	rjmp	.+6      	; 0x130 <lcd_send_nibble+0x2e>
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_enable_pulse>
 134:	08 95       	ret

00000136 <lcd_send_byte>:
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	21 f4       	brne	.+8      	; 0x146 <lcd_send_byte+0x10>
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 61       	ori	r24, 0x10	; 16
 142:	85 b9       	out	0x05, r24	; 5
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_send_byte+0x16>
 146:	85 b1       	in	r24, 0x05	; 5
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	8c 2f       	mov	r24, r28
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 156:	8c 2f       	mov	r24, r28
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_cmd>:
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_send_byte>
 16c:	c1 50       	subi	r28, 0x01	; 1
 16e:	c2 30       	cpi	r28, 0x02	; 2
 170:	30 f4       	brcc	.+12     	; 0x17e <lcd_cmd+0x1c>
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_cmd+0x14>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_cmd+0x1a>
 17c:	00 00       	nop
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <lcd_data>:
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_send_byte>
 188:	08 95       	ret

0000018a <lcd_set_cursor>:
 18a:	88 23       	and	r24, r24
 18c:	11 f0       	breq	.+4      	; 0x192 <lcd_set_cursor+0x8>
 18e:	90 e4       	ldi	r25, 0x40	; 64
 190:	01 c0       	rjmp	.+2      	; 0x194 <lcd_set_cursor+0xa>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	86 2f       	mov	r24, r22
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	89 0f       	add	r24, r25
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 1a0:	08 95       	ret

000001a2 <lcd_print>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_print+0xe>
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 1b0:	88 81       	ld	r24, Y
 1b2:	81 11       	cpse	r24, r1
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <lcd_print+0x8>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <lcd_clear>:
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 1c2:	08 95       	ret

000001c4 <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 1c4:	84 b1       	in	r24, 0x04	; 4
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8c 63       	ori	r24, 0x3C	; 60
 1d4:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	89 ef       	ldi	r24, 0xF9	; 249
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <lcd_init+0x18>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x22>
 1e6:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 1fa:	8f e1       	ldi	r24, 0x1F	; 31
 1fc:	9e e4       	ldi	r25, 0x4E	; 78
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x3a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x40>
 204:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	87 e5       	ldi	r24, 0x57	; 87
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x4c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x52>
 216:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 21e:	87 e5       	ldi	r24, 0x57	; 87
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x5e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x64>
 228:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 230:	87 e5       	ldi	r24, 0x57	; 87
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_init+0x70>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_init+0x76>
 23a:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 25a:	08 95       	ret

0000025c <lcd_print_uint16>:
}

void lcd_print_uint16(uint16_t v)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	if (v >= 10)
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	91 05       	cpc	r25, r1
 266:	68 f0       	brcs	.+26     	; 0x282 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 268:	9c 01       	movw	r18, r24
 26a:	ad ec       	ldi	r26, 0xCD	; 205
 26c:	bc ec       	ldi	r27, 0xCC	; 204
 26e:	0e 94 ae 03 	call	0x75c	; 0x75c <__umulhisi3>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 282:	9e 01       	movw	r18, r28
 284:	ad ec       	ldi	r26, 0xCD	; 205
 286:	bc ec       	ldi	r27, 0xCC	; 204
 288:	0e 94 ae 03 	call	0x75c	; 0x75c <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	9c 01       	movw	r18, r24
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	9e 01       	movw	r18, r28
 2b0:	28 1b       	sub	r18, r24
 2b2:	39 0b       	sbc	r19, r25
 2b4:	c9 01       	movw	r24, r18
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <lcd_print_float>:
		div /= 10;
	}
}*/

void lcd_print_float(float v)
{
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	6b 01       	movw	r12, r22
 2d8:	7c 01       	movw	r14, r24
	if (v < 0)
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	a9 01       	movw	r20, r18
 2e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__cmpsf2>
 2e4:	88 23       	and	r24, r24
 2e6:	3c f4       	brge	.+14     	; 0x2f6 <lcd_print_float+0x34>
	{
		lcd_data('-');
 2e8:	8d e2       	ldi	r24, 0x2D	; 45
 2ea:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
		v = -v;
 2ee:	f7 fa       	bst	r15, 7
 2f0:	f0 94       	com	r15
 2f2:	f7 f8       	bld	r15, 7
 2f4:	f0 94       	com	r15
	}

	uint16_t int_part = (uint16_t)v;
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fixunssfsi>
 2fe:	4b 01       	movw	r8, r22
 300:	5c 01       	movw	r10, r24
	uint16_t float_part = (uint16_t)(((v - int_part) * 100)+0.5); // 2 decimal places
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 8f 02 	call	0x51e	; 0x51e <__floatunsisf>
 30a:	9b 01       	movw	r18, r22
 30c:	ac 01       	movw	r20, r24
 30e:	c7 01       	movw	r24, r14
 310:	b6 01       	movw	r22, r12
 312:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__subsf3>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	48 ec       	ldi	r20, 0xC8	; 200
 31c:	52 e4       	ldi	r21, 0x42	; 66
 31e:	0e 94 41 03 	call	0x682	; 0x682 <__mulsf3>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	5f e3       	ldi	r21, 0x3F	; 63
 32a:	0e 94 ef 01 	call	0x3de	; 0x3de <__addsf3>
 32e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fixunssfsi>
 332:	6b 01       	movw	r12, r22
 334:	7c 01       	movw	r14, r24
 336:	eb 01       	movw	r28, r22

	lcd_print_uint16(int_part);
 338:	c4 01       	movw	r24, r8
 33a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_print_uint16>
	lcd_data('.');
 33e:	8e e2       	ldi	r24, 0x2E	; 46
 340:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>

	if (float_part < 10)
 344:	2a 97       	sbiw	r28, 0x0a	; 10
 346:	18 f4       	brcc	.+6      	; 0x34e <lcd_print_float+0x8c>
	{
		lcd_data('0');
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
	}

	lcd_print_uint16(float_part);
 34e:	c6 01       	movw	r24, r12
 350:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_print_uint16>
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	9f 90       	pop	r9
 366:	8f 90       	pop	r8
 368:	08 95       	ret

0000036a <main>:
#include "Icd.h"
#include "adc.h"

int main(void) {
    uint16_t adc_value;
	lcd_init();
 36a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_init>
	adc_init();
 36e:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
	while (1) 
    {
		float temp;
		lcd_clear();
 372:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_clear>
		adc_value = adc_read(1);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 37e:	ec 01       	movw	r28, r24
		lcd_set_cursor(0,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_cursor>
		temp = adc_value*0.488;
 388:	be 01       	movw	r22, r28
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 8f 02 	call	0x51e	; 0x51e <__floatunsisf>
 392:	23 e2       	ldi	r18, 0x23	; 35
 394:	3b ed       	ldi	r19, 0xDB	; 219
 396:	49 ef       	ldi	r20, 0xF9	; 249
 398:	5e e3       	ldi	r21, 0x3E	; 62
 39a:	0e 94 41 03 	call	0x682	; 0x682 <__mulsf3>
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
		lcd_print("Temperature:");
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_print>
		lcd_set_cursor(1,0);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_cursor>
		lcd_print_float(temp);
 3b2:	c7 01       	movw	r24, r14
 3b4:	b6 01       	movw	r22, r12
 3b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_print_float>
		lcd_data(0xDF);
 3ba:	8f ed       	ldi	r24, 0xDF	; 223
 3bc:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
		lcd_print("C");
 3c0:	8d e0       	ldi	r24, 0x0D	; 13
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	89 e6       	ldi	r24, 0x69	; 105
 3cc:	98 e1       	ldi	r25, 0x18	; 24
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x64>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x6e>
 3d8:	00 00       	nop
 3da:	cb cf       	rjmp	.-106    	; 0x372 <main+0x8>

000003dc <__subsf3>:
 3dc:	50 58       	subi	r21, 0x80	; 128

000003de <__addsf3>:
 3de:	bb 27       	eor	r27, r27
 3e0:	aa 27       	eor	r26, r26
 3e2:	0e 94 06 02 	call	0x40c	; 0x40c <__addsf3x>
 3e6:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 3ea:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 3ee:	38 f0       	brcs	.+14     	; 0x3fe <__addsf3+0x20>
 3f0:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__addsf3+0x20>
 3f6:	39 f4       	brne	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	9f 3f       	cpi	r25, 0xFF	; 255
 3fa:	19 f4       	brne	.+6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fc:	26 f4       	brtc	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>
 402:	0e f4       	brtc	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	e0 95       	com	r30
 406:	e7 fb       	bst	r30, 7
 408:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>

0000040c <__addsf3x>:
 40c:	e9 2f       	mov	r30, r25
 40e:	0e 94 18 03 	call	0x630	; 0x630 <__fp_split3>
 412:	58 f3       	brcs	.-42     	; 0x3ea <__addsf3+0xc>
 414:	ba 17       	cp	r27, r26
 416:	62 07       	cpc	r22, r18
 418:	73 07       	cpc	r23, r19
 41a:	84 07       	cpc	r24, r20
 41c:	95 07       	cpc	r25, r21
 41e:	20 f0       	brcs	.+8      	; 0x428 <__addsf3x+0x1c>
 420:	79 f4       	brne	.+30     	; 0x440 <__addsf3x+0x34>
 422:	a6 f5       	brtc	.+104    	; 0x48c <__addsf3x+0x80>
 424:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_zero>
 428:	0e f4       	brtc	.+2      	; 0x42c <__addsf3x+0x20>
 42a:	e0 95       	com	r30
 42c:	0b 2e       	mov	r0, r27
 42e:	ba 2f       	mov	r27, r26
 430:	a0 2d       	mov	r26, r0
 432:	0b 01       	movw	r0, r22
 434:	b9 01       	movw	r22, r18
 436:	90 01       	movw	r18, r0
 438:	0c 01       	movw	r0, r24
 43a:	ca 01       	movw	r24, r20
 43c:	a0 01       	movw	r20, r0
 43e:	11 24       	eor	r1, r1
 440:	ff 27       	eor	r31, r31
 442:	59 1b       	sub	r21, r25
 444:	99 f0       	breq	.+38     	; 0x46c <__addsf3x+0x60>
 446:	59 3f       	cpi	r21, 0xF9	; 249
 448:	50 f4       	brcc	.+20     	; 0x45e <__addsf3x+0x52>
 44a:	50 3e       	cpi	r21, 0xE0	; 224
 44c:	68 f1       	brcs	.+90     	; 0x4a8 <__addsf3x+0x9c>
 44e:	1a 16       	cp	r1, r26
 450:	f0 40       	sbci	r31, 0x00	; 0
 452:	a2 2f       	mov	r26, r18
 454:	23 2f       	mov	r18, r19
 456:	34 2f       	mov	r19, r20
 458:	44 27       	eor	r20, r20
 45a:	58 5f       	subi	r21, 0xF8	; 248
 45c:	f3 cf       	rjmp	.-26     	; 0x444 <__addsf3x+0x38>
 45e:	46 95       	lsr	r20
 460:	37 95       	ror	r19
 462:	27 95       	ror	r18
 464:	a7 95       	ror	r26
 466:	f0 40       	sbci	r31, 0x00	; 0
 468:	53 95       	inc	r21
 46a:	c9 f7       	brne	.-14     	; 0x45e <__addsf3x+0x52>
 46c:	7e f4       	brtc	.+30     	; 0x48c <__addsf3x+0x80>
 46e:	1f 16       	cp	r1, r31
 470:	ba 0b       	sbc	r27, r26
 472:	62 0b       	sbc	r22, r18
 474:	73 0b       	sbc	r23, r19
 476:	84 0b       	sbc	r24, r20
 478:	ba f0       	brmi	.+46     	; 0x4a8 <__addsf3x+0x9c>
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	a1 f0       	breq	.+40     	; 0x4a6 <__addsf3x+0x9a>
 47e:	ff 0f       	add	r31, r31
 480:	bb 1f       	adc	r27, r27
 482:	66 1f       	adc	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	c2 f7       	brpl	.-16     	; 0x47a <__addsf3x+0x6e>
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <__addsf3x+0x9c>
 48c:	ba 0f       	add	r27, r26
 48e:	62 1f       	adc	r22, r18
 490:	73 1f       	adc	r23, r19
 492:	84 1f       	adc	r24, r20
 494:	48 f4       	brcc	.+18     	; 0x4a8 <__addsf3x+0x9c>
 496:	87 95       	ror	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b7 95       	ror	r27
 49e:	f7 95       	ror	r31
 4a0:	9e 3f       	cpi	r25, 0xFE	; 254
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <__addsf3x+0x9a>
 4a4:	b0 cf       	rjmp	.-160    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 4a6:	93 95       	inc	r25
 4a8:	88 0f       	add	r24, r24
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <__addsf3x+0xa2>
 4ac:	99 27       	eor	r25, r25
 4ae:	ee 0f       	add	r30, r30
 4b0:	97 95       	ror	r25
 4b2:	87 95       	ror	r24
 4b4:	08 95       	ret

000004b6 <__cmpsf2>:
 4b6:	0e 94 cc 02 	call	0x598	; 0x598 <__fp_cmp>
 4ba:	08 f4       	brcc	.+2      	; 0x4be <__cmpsf2+0x8>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret

000004c0 <__fixunssfsi>:
 4c0:	0e 94 20 03 	call	0x640	; 0x640 <__fp_splitA>
 4c4:	88 f0       	brcs	.+34     	; 0x4e8 <__fixunssfsi+0x28>
 4c6:	9f 57       	subi	r25, 0x7F	; 127
 4c8:	98 f0       	brcs	.+38     	; 0x4f0 <__fixunssfsi+0x30>
 4ca:	b9 2f       	mov	r27, r25
 4cc:	99 27       	eor	r25, r25
 4ce:	b7 51       	subi	r27, 0x17	; 23
 4d0:	b0 f0       	brcs	.+44     	; 0x4fe <__fixunssfsi+0x3e>
 4d2:	e1 f0       	breq	.+56     	; 0x50c <__fixunssfsi+0x4c>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	1a f0       	brmi	.+6      	; 0x4e4 <__fixunssfsi+0x24>
 4de:	ba 95       	dec	r27
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__fixunssfsi+0x14>
 4e2:	14 c0       	rjmp	.+40     	; 0x50c <__fixunssfsi+0x4c>
 4e4:	b1 30       	cpi	r27, 0x01	; 1
 4e6:	91 f0       	breq	.+36     	; 0x50c <__fixunssfsi+0x4c>
 4e8:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_zero>
 4ec:	b1 e0       	ldi	r27, 0x01	; 1
 4ee:	08 95       	ret
 4f0:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_zero>
 4f4:	67 2f       	mov	r22, r23
 4f6:	78 2f       	mov	r23, r24
 4f8:	88 27       	eor	r24, r24
 4fa:	b8 5f       	subi	r27, 0xF8	; 248
 4fc:	39 f0       	breq	.+14     	; 0x50c <__fixunssfsi+0x4c>
 4fe:	b9 3f       	cpi	r27, 0xF9	; 249
 500:	cc f3       	brlt	.-14     	; 0x4f4 <__fixunssfsi+0x34>
 502:	86 95       	lsr	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b3 95       	inc	r27
 50a:	d9 f7       	brne	.-10     	; 0x502 <__fixunssfsi+0x42>
 50c:	3e f4       	brtc	.+14     	; 0x51c <__fixunssfsi+0x5c>
 50e:	90 95       	com	r25
 510:	80 95       	com	r24
 512:	70 95       	com	r23
 514:	61 95       	neg	r22
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__floatunsisf>:
 51e:	e8 94       	clt
 520:	09 c0       	rjmp	.+18     	; 0x534 <__floatsisf+0x12>

00000522 <__floatsisf>:
 522:	97 fb       	bst	r25, 7
 524:	3e f4       	brtc	.+14     	; 0x534 <__floatsisf+0x12>
 526:	90 95       	com	r25
 528:	80 95       	com	r24
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	99 23       	and	r25, r25
 536:	a9 f0       	breq	.+42     	; 0x562 <__floatsisf+0x40>
 538:	f9 2f       	mov	r31, r25
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	bb 27       	eor	r27, r27
 53e:	93 95       	inc	r25
 540:	f6 95       	lsr	r31
 542:	87 95       	ror	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f1 11       	cpse	r31, r1
 54c:	f8 cf       	rjmp	.-16     	; 0x53e <__floatsisf+0x1c>
 54e:	fa f4       	brpl	.+62     	; 0x58e <__floatsisf+0x6c>
 550:	bb 0f       	add	r27, r27
 552:	11 f4       	brne	.+4      	; 0x558 <__floatsisf+0x36>
 554:	60 ff       	sbrs	r22, 0
 556:	1b c0       	rjmp	.+54     	; 0x58e <__floatsisf+0x6c>
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	16 c0       	rjmp	.+44     	; 0x58e <__floatsisf+0x6c>
 562:	88 23       	and	r24, r24
 564:	11 f0       	breq	.+4      	; 0x56a <__floatsisf+0x48>
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	11 c0       	rjmp	.+34     	; 0x58c <__floatsisf+0x6a>
 56a:	77 23       	and	r23, r23
 56c:	21 f0       	breq	.+8      	; 0x576 <__floatsisf+0x54>
 56e:	9e e8       	ldi	r25, 0x8E	; 142
 570:	87 2f       	mov	r24, r23
 572:	76 2f       	mov	r23, r22
 574:	05 c0       	rjmp	.+10     	; 0x580 <__floatsisf+0x5e>
 576:	66 23       	and	r22, r22
 578:	71 f0       	breq	.+28     	; 0x596 <__floatsisf+0x74>
 57a:	96 e8       	ldi	r25, 0x86	; 134
 57c:	86 2f       	mov	r24, r22
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	2a f0       	brmi	.+10     	; 0x58e <__floatsisf+0x6c>
 584:	9a 95       	dec	r25
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	da f7       	brpl	.-10     	; 0x584 <__floatsisf+0x62>
 58e:	88 0f       	add	r24, r24
 590:	96 95       	lsr	r25
 592:	87 95       	ror	r24
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret

00000598 <__fp_cmp>:
 598:	99 0f       	add	r25, r25
 59a:	00 08       	sbc	r0, r0
 59c:	55 0f       	add	r21, r21
 59e:	aa 0b       	sbc	r26, r26
 5a0:	e0 e8       	ldi	r30, 0x80	; 128
 5a2:	fe ef       	ldi	r31, 0xFE	; 254
 5a4:	16 16       	cp	r1, r22
 5a6:	17 06       	cpc	r1, r23
 5a8:	e8 07       	cpc	r30, r24
 5aa:	f9 07       	cpc	r31, r25
 5ac:	c0 f0       	brcs	.+48     	; 0x5de <__fp_cmp+0x46>
 5ae:	12 16       	cp	r1, r18
 5b0:	13 06       	cpc	r1, r19
 5b2:	e4 07       	cpc	r30, r20
 5b4:	f5 07       	cpc	r31, r21
 5b6:	98 f0       	brcs	.+38     	; 0x5de <__fp_cmp+0x46>
 5b8:	62 1b       	sub	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	95 0b       	sbc	r25, r21
 5c0:	39 f4       	brne	.+14     	; 0x5d0 <__fp_cmp+0x38>
 5c2:	0a 26       	eor	r0, r26
 5c4:	61 f0       	breq	.+24     	; 0x5de <__fp_cmp+0x46>
 5c6:	23 2b       	or	r18, r19
 5c8:	24 2b       	or	r18, r20
 5ca:	25 2b       	or	r18, r21
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <__fp_cmp+0x3e>
 5ce:	08 95       	ret
 5d0:	0a 26       	eor	r0, r26
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__fp_cmp+0x3e>
 5d4:	a1 40       	sbci	r26, 0x01	; 1
 5d6:	a6 95       	lsr	r26
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	81 1d       	adc	r24, r1
 5dc:	81 1d       	adc	r24, r1
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__fp_split3>:
 630:	57 fd       	sbrc	r21, 7
 632:	90 58       	subi	r25, 0x80	; 128
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	59 f0       	breq	.+22     	; 0x650 <__fp_splitA+0x10>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	71 f0       	breq	.+28     	; 0x65a <__fp_splitA+0x1a>
 63e:	47 95       	ror	r20

00000640 <__fp_splitA>:
 640:	88 0f       	add	r24, r24
 642:	97 fb       	bst	r25, 7
 644:	99 1f       	adc	r25, r25
 646:	61 f0       	breq	.+24     	; 0x660 <__fp_splitA+0x20>
 648:	9f 3f       	cpi	r25, 0xFF	; 255
 64a:	79 f0       	breq	.+30     	; 0x66a <__fp_splitA+0x2a>
 64c:	87 95       	ror	r24
 64e:	08 95       	ret
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	55 1f       	adc	r21, r21
 658:	f2 cf       	rjmp	.-28     	; 0x63e <__fp_split3+0xe>
 65a:	46 95       	lsr	r20
 65c:	f1 df       	rcall	.-30     	; 0x640 <__fp_splitA>
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__fp_splitA+0x30>
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	99 1f       	adc	r25, r25
 668:	f1 cf       	rjmp	.-30     	; 0x64c <__fp_splitA+0xc>
 66a:	86 95       	lsr	r24
 66c:	71 05       	cpc	r23, r1
 66e:	61 05       	cpc	r22, r1
 670:	08 94       	sec
 672:	08 95       	ret

00000674 <__fp_zero>:
 674:	e8 94       	clt

00000676 <__fp_szero>:
 676:	bb 27       	eor	r27, r27
 678:	66 27       	eor	r22, r22
 67a:	77 27       	eor	r23, r23
 67c:	cb 01       	movw	r24, r22
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret

00000682 <__mulsf3>:
 682:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3x>
 686:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 68a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 68e:	38 f0       	brcs	.+14     	; 0x69e <__mulsf3+0x1c>
 690:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 694:	20 f0       	brcs	.+8      	; 0x69e <__mulsf3+0x1c>
 696:	95 23       	and	r25, r21
 698:	11 f0       	breq	.+4      	; 0x69e <__mulsf3+0x1c>
 69a:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 69e:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>
 6a2:	11 24       	eor	r1, r1
 6a4:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>

000006a8 <__mulsf3x>:
 6a8:	0e 94 18 03 	call	0x630	; 0x630 <__fp_split3>
 6ac:	70 f3       	brcs	.-36     	; 0x68a <__mulsf3+0x8>

000006ae <__mulsf3_pse>:
 6ae:	95 9f       	mul	r25, r21
 6b0:	c1 f3       	breq	.-16     	; 0x6a2 <__mulsf3+0x20>
 6b2:	95 0f       	add	r25, r21
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	55 1f       	adc	r21, r21
 6b8:	62 9f       	mul	r22, r18
 6ba:	f0 01       	movw	r30, r0
 6bc:	72 9f       	mul	r23, r18
 6be:	bb 27       	eor	r27, r27
 6c0:	f0 0d       	add	r31, r0
 6c2:	b1 1d       	adc	r27, r1
 6c4:	63 9f       	mul	r22, r19
 6c6:	aa 27       	eor	r26, r26
 6c8:	f0 0d       	add	r31, r0
 6ca:	b1 1d       	adc	r27, r1
 6cc:	aa 1f       	adc	r26, r26
 6ce:	64 9f       	mul	r22, r20
 6d0:	66 27       	eor	r22, r22
 6d2:	b0 0d       	add	r27, r0
 6d4:	a1 1d       	adc	r26, r1
 6d6:	66 1f       	adc	r22, r22
 6d8:	82 9f       	mul	r24, r18
 6da:	22 27       	eor	r18, r18
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	62 1f       	adc	r22, r18
 6e2:	73 9f       	mul	r23, r19
 6e4:	b0 0d       	add	r27, r0
 6e6:	a1 1d       	adc	r26, r1
 6e8:	62 1f       	adc	r22, r18
 6ea:	83 9f       	mul	r24, r19
 6ec:	a0 0d       	add	r26, r0
 6ee:	61 1d       	adc	r22, r1
 6f0:	22 1f       	adc	r18, r18
 6f2:	74 9f       	mul	r23, r20
 6f4:	33 27       	eor	r19, r19
 6f6:	a0 0d       	add	r26, r0
 6f8:	61 1d       	adc	r22, r1
 6fa:	23 1f       	adc	r18, r19
 6fc:	84 9f       	mul	r24, r20
 6fe:	60 0d       	add	r22, r0
 700:	21 1d       	adc	r18, r1
 702:	82 2f       	mov	r24, r18
 704:	76 2f       	mov	r23, r22
 706:	6a 2f       	mov	r22, r26
 708:	11 24       	eor	r1, r1
 70a:	9f 57       	subi	r25, 0x7F	; 127
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	9a f0       	brmi	.+38     	; 0x736 <__mulsf3_pse+0x88>
 710:	f1 f0       	breq	.+60     	; 0x74e <__mulsf3_pse+0xa0>
 712:	88 23       	and	r24, r24
 714:	4a f0       	brmi	.+18     	; 0x728 <__mulsf3_pse+0x7a>
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	bb 1f       	adc	r27, r27
 71c:	66 1f       	adc	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	91 50       	subi	r25, 0x01	; 1
 724:	50 40       	sbci	r21, 0x00	; 0
 726:	a9 f7       	brne	.-22     	; 0x712 <__mulsf3_pse+0x64>
 728:	9e 3f       	cpi	r25, 0xFE	; 254
 72a:	51 05       	cpc	r21, r1
 72c:	80 f0       	brcs	.+32     	; 0x74e <__mulsf3_pse+0xa0>
 72e:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 732:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	e4 f3       	brlt	.-8      	; 0x732 <__mulsf3_pse+0x84>
 73a:	98 3e       	cpi	r25, 0xE8	; 232
 73c:	d4 f3       	brlt	.-12     	; 0x732 <__mulsf3_pse+0x84>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f7 95       	ror	r31
 748:	e7 95       	ror	r30
 74a:	9f 5f       	subi	r25, 0xFF	; 255
 74c:	c1 f7       	brne	.-16     	; 0x73e <__mulsf3_pse+0x90>
 74e:	fe 2b       	or	r31, r30
 750:	88 0f       	add	r24, r24
 752:	91 1d       	adc	r25, r1
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret

0000075c <__umulhisi3>:
 75c:	a2 9f       	mul	r26, r18
 75e:	b0 01       	movw	r22, r0
 760:	b3 9f       	mul	r27, r19
 762:	c0 01       	movw	r24, r0
 764:	a3 9f       	mul	r26, r19
 766:	70 0d       	add	r23, r0
 768:	81 1d       	adc	r24, r1
 76a:	11 24       	eor	r1, r1
 76c:	91 1d       	adc	r25, r1
 76e:	b2 9f       	mul	r27, r18
 770:	70 0d       	add	r23, r0
 772:	81 1d       	adc	r24, r1
 774:	11 24       	eor	r1, r1
 776:	91 1d       	adc	r25, r1
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
