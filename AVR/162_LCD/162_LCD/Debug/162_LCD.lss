
162_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000734  000007a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000734  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e04  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000562  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000600  00000000  00000000  000029d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  8e:	0c 94 98 03 	jmp	0x730	; 0x730 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_enable_pulse+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_enable_pulse+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_enable_pulse+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_send_nibble>:
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	83 ff       	sbrs	r24, 3
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_send_nibble+0x10>
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	82 ff       	sbrs	r24, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_send_nibble+0x1a>
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	98 60       	ori	r25, 0x08	; 8
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	81 ff       	sbrs	r24, 1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_send_nibble+0x24>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	80 ff       	sbrs	r24, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_send_nibble+0x2e>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable_pulse>
  ea:	08 95       	ret

000000ec <lcd_send_byte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <lcd_send_byte+0x10>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_send_byte+0x16>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
 102:	8c 2f       	mov	r24, r28
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 10c:	8c 2f       	mov	r24, r28
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_cmd>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 122:	c1 50       	subi	r28, 0x01	; 1
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	30 f4       	brcc	.+12     	; 0x134 <lcd_cmd+0x1c>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_cmd+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_cmd+0x1a>
 132:	00 00       	nop
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 13e:	08 95       	ret

00000140 <lcd_set_cursor>:
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_set_cursor+0x8>
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_set_cursor+0xa>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 0f       	add	r24, r25
 150:	80 68       	ori	r24, 0x80	; 128
 152:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 156:	08 95       	ret

00000158 <lcd_print>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_print+0xe>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <lcd_print+0x8>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 172:	84 b1       	in	r24, 0x04	; 4
 174:	80 61       	ori	r24, 0x10	; 16
 176:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	8c 63       	ori	r24, 0x3C	; 60
 182:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <lcd_init+0x18>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x22>
 194:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 196:	85 b1       	in	r24, 0x05	; 5
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x3a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x40>
 1b2:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	87 e5       	ldi	r24, 0x57	; 87
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x4c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x52>
 1c4:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1cc:	87 e5       	ldi	r24, 0x57	; 87
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x5e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x64>
 1d6:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1de:	87 e5       	ldi	r24, 0x57	; 87
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x70>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_init+0x76>
 1e8:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 208:	08 95       	ret

0000020a <lcd_print_uint16>:
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
}
*/

void lcd_print_uint16(uint16_t v) {
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	48 2f       	mov	r20, r24
 214:	e9 2f       	mov	r30, r25
	uint16_t div = 1;
 216:	c1 e0       	ldi	r28, 0x01	; 1
 218:	d0 e0       	ldi	r29, 0x00	; 0
	
	while((v/div) >= 10) {
 21a:	0b c0       	rjmp	.+22     	; 0x232 <lcd_print_uint16+0x28>
		div *= 10;
 21c:	ce 01       	movw	r24, r28
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	cc 0f       	add	r28, r28
 224:	dd 1f       	adc	r29, r29
 226:	cc 0f       	add	r28, r28
 228:	dd 1f       	adc	r29, r29
 22a:	cc 0f       	add	r28, r28
 22c:	dd 1f       	adc	r29, r29
 22e:	c8 0f       	add	r28, r24
 230:	d9 1f       	adc	r29, r25
*/

void lcd_print_uint16(uint16_t v) {
	uint16_t div = 1;
	
	while((v/div) >= 10) {
 232:	84 2f       	mov	r24, r20
 234:	9e 2f       	mov	r25, r30
 236:	be 01       	movw	r22, r28
 238:	0e 94 75 03 	call	0x6ea	; 0x6ea <__udivmodhi4>
 23c:	6a 30       	cpi	r22, 0x0A	; 10
 23e:	71 05       	cpc	r23, r1
 240:	68 f7       	brcc	.-38     	; 0x21c <lcd_print_uint16+0x12>
 242:	19 c0       	rjmp	.+50     	; 0x276 <lcd_print_uint16+0x6c>
		div *= 10;
	}
	
	while(div>0) {
		lcd_data('0'+v/div);
 244:	84 2f       	mov	r24, r20
 246:	9e 2f       	mov	r25, r30
 248:	be 01       	movw	r22, r28
 24a:	0e 94 75 03 	call	0x6ea	; 0x6ea <__udivmodhi4>
 24e:	18 2f       	mov	r17, r24
 250:	09 2f       	mov	r16, r25
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	86 0f       	add	r24, r22
 256:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
		v = v%div;
 25a:	41 2f       	mov	r20, r17
 25c:	e0 2f       	mov	r30, r16
		div /= 10;
 25e:	9e 01       	movw	r18, r28
 260:	ad ec       	ldi	r26, 0xCD	; 205
 262:	bc ec       	ldi	r27, 0xCC	; 204
 264:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 268:	ec 01       	movw	r28, r24
 26a:	d6 95       	lsr	r29
 26c:	c7 95       	ror	r28
 26e:	d6 95       	lsr	r29
 270:	c7 95       	ror	r28
 272:	d6 95       	lsr	r29
 274:	c7 95       	ror	r28
	
	while((v/div) >= 10) {
		div *= 10;
	}
	
	while(div>0) {
 276:	20 97       	sbiw	r28, 0x00	; 0
 278:	29 f7       	brne	.-54     	; 0x244 <lcd_print_uint16+0x3a>
		lcd_data('0'+v/div);
		v = v%div;
		div /= 10;
	}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <lcd_print_float>:

void lcd_print_float(float v)
{
 284:	8f 92       	push	r8
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
	if (v < 0)
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	a9 01       	movw	r20, r18
 2a2:	0e 94 22 02 	call	0x444	; 0x444 <__cmpsf2>
 2a6:	88 23       	and	r24, r24
 2a8:	3c f4       	brge	.+14     	; 0x2b8 <lcd_print_float+0x34>
	{
		lcd_data('-');
 2aa:	8d e2       	ldi	r24, 0x2D	; 45
 2ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
		v = -v;
 2b0:	f7 fa       	bst	r15, 7
 2b2:	f0 94       	com	r15
 2b4:	f7 f8       	bld	r15, 7
 2b6:	f0 94       	com	r15
	}

	uint16_t int_part = (uint16_t)v;
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	0e 94 27 02 	call	0x44e	; 0x44e <__fixunssfsi>
 2c0:	4b 01       	movw	r8, r22
 2c2:	5c 01       	movw	r10, r24
	uint16_t float_part = (uint16_t)(((v - int_part) * 100)+0.5); // 2 decimal places
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 56 02 	call	0x4ac	; 0x4ac <__floatunsisf>
 2cc:	9b 01       	movw	r18, r22
 2ce:	ac 01       	movw	r20, r24
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	0e 94 b5 01 	call	0x36a	; 0x36a <__subsf3>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	48 ec       	ldi	r20, 0xC8	; 200
 2de:	52 e4       	ldi	r21, 0x42	; 66
 2e0:	0e 94 08 03 	call	0x610	; 0x610 <__mulsf3>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	5f e3       	ldi	r21, 0x3F	; 63
 2ec:	0e 94 b6 01 	call	0x36c	; 0x36c <__addsf3>
 2f0:	0e 94 27 02 	call	0x44e	; 0x44e <__fixunssfsi>
 2f4:	6b 01       	movw	r12, r22
 2f6:	7c 01       	movw	r14, r24
 2f8:	eb 01       	movw	r28, r22

	lcd_print_uint16(int_part);
 2fa:	c4 01       	movw	r24, r8
 2fc:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print_uint16>
	lcd_data('.');
 300:	8e e2       	ldi	r24, 0x2E	; 46
 302:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>

	if (float_part < 10)
 306:	2a 97       	sbiw	r28, 0x0a	; 10
 308:	18 f4       	brcc	.+6      	; 0x310 <lcd_print_float+0x8c>
	{
		lcd_data('0');
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
	}

	lcd_print_uint16(float_part);
 310:	c6 01       	movw	r24, r12
 312:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print_uint16>
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	9f 90       	pop	r9
 328:	8f 90       	pop	r8
 32a:	08 95       	ret

0000032c <main>:
#include <util/delay.h>
#include "Icd.h"

int main(void)
{
	lcd_init();
 32c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_init>
	lcd_set_cursor(0, 0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print("integer : ");
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
	lcd_print_uint16(173);
 340:	8d ea       	ldi	r24, 0xAD	; 173
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print_uint16>

	lcd_set_cursor(1, 0);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print("float : ");
 350:	8b e0       	ldi	r24, 0x0B	; 11
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>

	// small demo: print a number
	lcd_print_float(88.7);
 358:	66 e6       	ldi	r22, 0x66	; 102
 35a:	76 e6       	ldi	r23, 0x66	; 102
 35c:	81 eb       	ldi	r24, 0xB1	; 177
 35e:	92 e4       	ldi	r25, 0x42	; 66
 360:	0e 94 42 01 	call	0x284	; 0x284 <lcd_print_float>
		lcd_clear();
		_delay_ms(1000);

	}
	*/
}
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

0000036a <__subsf3>:
 36a:	50 58       	subi	r21, 0x80	; 128

0000036c <__addsf3>:
 36c:	bb 27       	eor	r27, r27
 36e:	aa 27       	eor	r26, r26
 370:	0e 94 cd 01 	call	0x39a	; 0x39a <__addsf3x>
 374:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_round>
 378:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_pscA>
 37c:	38 f0       	brcs	.+14     	; 0x38c <__addsf3+0x20>
 37e:	0e 94 c7 02 	call	0x58e	; 0x58e <__fp_pscB>
 382:	20 f0       	brcs	.+8      	; 0x38c <__addsf3+0x20>
 384:	39 f4       	brne	.+14     	; 0x394 <__addsf3+0x28>
 386:	9f 3f       	cpi	r25, 0xFF	; 255
 388:	19 f4       	brne	.+6      	; 0x390 <__addsf3+0x24>
 38a:	26 f4       	brtc	.+8      	; 0x394 <__addsf3+0x28>
 38c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_nan>
 390:	0e f4       	brtc	.+2      	; 0x394 <__addsf3+0x28>
 392:	e0 95       	com	r30
 394:	e7 fb       	bst	r30, 7
 396:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_inf>

0000039a <__addsf3x>:
 39a:	e9 2f       	mov	r30, r25
 39c:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_split3>
 3a0:	58 f3       	brcs	.-42     	; 0x378 <__addsf3+0xc>
 3a2:	ba 17       	cp	r27, r26
 3a4:	62 07       	cpc	r22, r18
 3a6:	73 07       	cpc	r23, r19
 3a8:	84 07       	cpc	r24, r20
 3aa:	95 07       	cpc	r25, r21
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <__addsf3x+0x1c>
 3ae:	79 f4       	brne	.+30     	; 0x3ce <__addsf3x+0x34>
 3b0:	a6 f5       	brtc	.+104    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3b2:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_zero>
 3b6:	0e f4       	brtc	.+2      	; 0x3ba <__addsf3x+0x20>
 3b8:	e0 95       	com	r30
 3ba:	0b 2e       	mov	r0, r27
 3bc:	ba 2f       	mov	r27, r26
 3be:	a0 2d       	mov	r26, r0
 3c0:	0b 01       	movw	r0, r22
 3c2:	b9 01       	movw	r22, r18
 3c4:	90 01       	movw	r18, r0
 3c6:	0c 01       	movw	r0, r24
 3c8:	ca 01       	movw	r24, r20
 3ca:	a0 01       	movw	r20, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	ff 27       	eor	r31, r31
 3d0:	59 1b       	sub	r21, r25
 3d2:	99 f0       	breq	.+38     	; 0x3fa <__addsf3x+0x60>
 3d4:	59 3f       	cpi	r21, 0xF9	; 249
 3d6:	50 f4       	brcc	.+20     	; 0x3ec <__addsf3x+0x52>
 3d8:	50 3e       	cpi	r21, 0xE0	; 224
 3da:	68 f1       	brcs	.+90     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3dc:	1a 16       	cp	r1, r26
 3de:	f0 40       	sbci	r31, 0x00	; 0
 3e0:	a2 2f       	mov	r26, r18
 3e2:	23 2f       	mov	r18, r19
 3e4:	34 2f       	mov	r19, r20
 3e6:	44 27       	eor	r20, r20
 3e8:	58 5f       	subi	r21, 0xF8	; 248
 3ea:	f3 cf       	rjmp	.-26     	; 0x3d2 <__addsf3x+0x38>
 3ec:	46 95       	lsr	r20
 3ee:	37 95       	ror	r19
 3f0:	27 95       	ror	r18
 3f2:	a7 95       	ror	r26
 3f4:	f0 40       	sbci	r31, 0x00	; 0
 3f6:	53 95       	inc	r21
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <__addsf3x+0x52>
 3fa:	7e f4       	brtc	.+30     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3fc:	1f 16       	cp	r1, r31
 3fe:	ba 0b       	sbc	r27, r26
 400:	62 0b       	sbc	r22, r18
 402:	73 0b       	sbc	r23, r19
 404:	84 0b       	sbc	r24, r20
 406:	ba f0       	brmi	.+46     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 408:	91 50       	subi	r25, 0x01	; 1
 40a:	a1 f0       	breq	.+40     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40c:	ff 0f       	add	r31, r31
 40e:	bb 1f       	adc	r27, r27
 410:	66 1f       	adc	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	c2 f7       	brpl	.-16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 418:	0e c0       	rjmp	.+28     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41a:	ba 0f       	add	r27, r26
 41c:	62 1f       	adc	r22, r18
 41e:	73 1f       	adc	r23, r19
 420:	84 1f       	adc	r24, r20
 422:	48 f4       	brcc	.+18     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 424:	87 95       	ror	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f7 95       	ror	r31
 42e:	9e 3f       	cpi	r25, 0xFE	; 254
 430:	08 f0       	brcs	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	b0 cf       	rjmp	.-160    	; 0x394 <__addsf3+0x28>
 434:	93 95       	inc	r25
 436:	88 0f       	add	r24, r24
 438:	08 f0       	brcs	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	99 27       	eor	r25, r25
 43c:	ee 0f       	add	r30, r30
 43e:	97 95       	ror	r25
 440:	87 95       	ror	r24
 442:	08 95       	ret

00000444 <__cmpsf2>:
 444:	0e 94 93 02 	call	0x526	; 0x526 <__fp_cmp>
 448:	08 f4       	brcc	.+2      	; 0x44c <__cmpsf2+0x8>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	08 95       	ret

0000044e <__fixunssfsi>:
 44e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_splitA>
 452:	88 f0       	brcs	.+34     	; 0x476 <__fixunssfsi+0x28>
 454:	9f 57       	subi	r25, 0x7F	; 127
 456:	98 f0       	brcs	.+38     	; 0x47e <__fixunssfsi+0x30>
 458:	b9 2f       	mov	r27, r25
 45a:	99 27       	eor	r25, r25
 45c:	b7 51       	subi	r27, 0x17	; 23
 45e:	b0 f0       	brcs	.+44     	; 0x48c <__fixunssfsi+0x3e>
 460:	e1 f0       	breq	.+56     	; 0x49a <__fixunssfsi+0x4c>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	1a f0       	brmi	.+6      	; 0x472 <__fixunssfsi+0x24>
 46c:	ba 95       	dec	r27
 46e:	c9 f7       	brne	.-14     	; 0x462 <__fixunssfsi+0x14>
 470:	14 c0       	rjmp	.+40     	; 0x49a <__fixunssfsi+0x4c>
 472:	b1 30       	cpi	r27, 0x01	; 1
 474:	91 f0       	breq	.+36     	; 0x49a <__fixunssfsi+0x4c>
 476:	0e 94 01 03 	call	0x602	; 0x602 <__fp_zero>
 47a:	b1 e0       	ldi	r27, 0x01	; 1
 47c:	08 95       	ret
 47e:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_zero>
 482:	67 2f       	mov	r22, r23
 484:	78 2f       	mov	r23, r24
 486:	88 27       	eor	r24, r24
 488:	b8 5f       	subi	r27, 0xF8	; 248
 48a:	39 f0       	breq	.+14     	; 0x49a <__fixunssfsi+0x4c>
 48c:	b9 3f       	cpi	r27, 0xF9	; 249
 48e:	cc f3       	brlt	.-14     	; 0x482 <__fixunssfsi+0x34>
 490:	86 95       	lsr	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b3 95       	inc	r27
 498:	d9 f7       	brne	.-10     	; 0x490 <__fixunssfsi+0x42>
 49a:	3e f4       	brtc	.+14     	; 0x4aa <__fixunssfsi+0x5c>
 49c:	90 95       	com	r25
 49e:	80 95       	com	r24
 4a0:	70 95       	com	r23
 4a2:	61 95       	neg	r22
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <__floatunsisf>:
 4ac:	e8 94       	clt
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__floatsisf+0x12>

000004b0 <__floatsisf>:
 4b0:	97 fb       	bst	r25, 7
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__floatsisf+0x12>
 4b4:	90 95       	com	r25
 4b6:	80 95       	com	r24
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	99 23       	and	r25, r25
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <__floatsisf+0x40>
 4c6:	f9 2f       	mov	r31, r25
 4c8:	96 e9       	ldi	r25, 0x96	; 150
 4ca:	bb 27       	eor	r27, r27
 4cc:	93 95       	inc	r25
 4ce:	f6 95       	lsr	r31
 4d0:	87 95       	ror	r24
 4d2:	77 95       	ror	r23
 4d4:	67 95       	ror	r22
 4d6:	b7 95       	ror	r27
 4d8:	f1 11       	cpse	r31, r1
 4da:	f8 cf       	rjmp	.-16     	; 0x4cc <__floatsisf+0x1c>
 4dc:	fa f4       	brpl	.+62     	; 0x51c <__floatsisf+0x6c>
 4de:	bb 0f       	add	r27, r27
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__floatsisf+0x36>
 4e2:	60 ff       	sbrs	r22, 0
 4e4:	1b c0       	rjmp	.+54     	; 0x51c <__floatsisf+0x6c>
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	16 c0       	rjmp	.+44     	; 0x51c <__floatsisf+0x6c>
 4f0:	88 23       	and	r24, r24
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <__floatsisf+0x48>
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	11 c0       	rjmp	.+34     	; 0x51a <__floatsisf+0x6a>
 4f8:	77 23       	and	r23, r23
 4fa:	21 f0       	breq	.+8      	; 0x504 <__floatsisf+0x54>
 4fc:	9e e8       	ldi	r25, 0x8E	; 142
 4fe:	87 2f       	mov	r24, r23
 500:	76 2f       	mov	r23, r22
 502:	05 c0       	rjmp	.+10     	; 0x50e <__floatsisf+0x5e>
 504:	66 23       	and	r22, r22
 506:	71 f0       	breq	.+28     	; 0x524 <__floatsisf+0x74>
 508:	96 e8       	ldi	r25, 0x86	; 134
 50a:	86 2f       	mov	r24, r22
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	2a f0       	brmi	.+10     	; 0x51c <__floatsisf+0x6c>
 512:	9a 95       	dec	r25
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	da f7       	brpl	.-10     	; 0x512 <__floatsisf+0x62>
 51c:	88 0f       	add	r24, r24
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__fp_cmp>:
 526:	99 0f       	add	r25, r25
 528:	00 08       	sbc	r0, r0
 52a:	55 0f       	add	r21, r21
 52c:	aa 0b       	sbc	r26, r26
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	fe ef       	ldi	r31, 0xFE	; 254
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	e8 07       	cpc	r30, r24
 538:	f9 07       	cpc	r31, r25
 53a:	c0 f0       	brcs	.+48     	; 0x56c <__fp_cmp+0x46>
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	e4 07       	cpc	r30, r20
 542:	f5 07       	cpc	r31, r21
 544:	98 f0       	brcs	.+38     	; 0x56c <__fp_cmp+0x46>
 546:	62 1b       	sub	r22, r18
 548:	73 0b       	sbc	r23, r19
 54a:	84 0b       	sbc	r24, r20
 54c:	95 0b       	sbc	r25, r21
 54e:	39 f4       	brne	.+14     	; 0x55e <__fp_cmp+0x38>
 550:	0a 26       	eor	r0, r26
 552:	61 f0       	breq	.+24     	; 0x56c <__fp_cmp+0x46>
 554:	23 2b       	or	r18, r19
 556:	24 2b       	or	r18, r20
 558:	25 2b       	or	r18, r21
 55a:	21 f4       	brne	.+8      	; 0x564 <__fp_cmp+0x3e>
 55c:	08 95       	ret
 55e:	0a 26       	eor	r0, r26
 560:	09 f4       	brne	.+2      	; 0x564 <__fp_cmp+0x3e>
 562:	a1 40       	sbci	r26, 0x01	; 1
 564:	a6 95       	lsr	r26
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	81 1d       	adc	r24, r1
 56a:	81 1d       	adc	r24, r1
 56c:	08 95       	ret

0000056e <__fp_inf>:
 56e:	97 f9       	bld	r25, 7
 570:	9f 67       	ori	r25, 0x7F	; 127
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	08 95       	ret

0000057a <__fp_nan>:
 57a:	9f ef       	ldi	r25, 0xFF	; 255
 57c:	80 ec       	ldi	r24, 0xC0	; 192
 57e:	08 95       	ret

00000580 <__fp_pscA>:
 580:	00 24       	eor	r0, r0
 582:	0a 94       	dec	r0
 584:	16 16       	cp	r1, r22
 586:	17 06       	cpc	r1, r23
 588:	18 06       	cpc	r1, r24
 58a:	09 06       	cpc	r0, r25
 58c:	08 95       	ret

0000058e <__fp_pscB>:
 58e:	00 24       	eor	r0, r0
 590:	0a 94       	dec	r0
 592:	12 16       	cp	r1, r18
 594:	13 06       	cpc	r1, r19
 596:	14 06       	cpc	r1, r20
 598:	05 06       	cpc	r0, r21
 59a:	08 95       	ret

0000059c <__fp_round>:
 59c:	09 2e       	mov	r0, r25
 59e:	03 94       	inc	r0
 5a0:	00 0c       	add	r0, r0
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__fp_round+0xc>
 5a4:	88 23       	and	r24, r24
 5a6:	52 f0       	brmi	.+20     	; 0x5bc <__fp_round+0x20>
 5a8:	bb 0f       	add	r27, r27
 5aa:	40 f4       	brcc	.+16     	; 0x5bc <__fp_round+0x20>
 5ac:	bf 2b       	or	r27, r31
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0x18>
 5b0:	60 ff       	sbrs	r22, 0
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <__fp_round+0x20>
 5b4:	6f 5f       	subi	r22, 0xFF	; 255
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <__fp_split3>:
 5be:	57 fd       	sbrc	r21, 7
 5c0:	90 58       	subi	r25, 0x80	; 128
 5c2:	44 0f       	add	r20, r20
 5c4:	55 1f       	adc	r21, r21
 5c6:	59 f0       	breq	.+22     	; 0x5de <__fp_splitA+0x10>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <__fp_splitA+0x1a>
 5cc:	47 95       	ror	r20

000005ce <__fp_splitA>:
 5ce:	88 0f       	add	r24, r24
 5d0:	97 fb       	bst	r25, 7
 5d2:	99 1f       	adc	r25, r25
 5d4:	61 f0       	breq	.+24     	; 0x5ee <__fp_splitA+0x20>
 5d6:	9f 3f       	cpi	r25, 0xFF	; 255
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <__fp_splitA+0x2a>
 5da:	87 95       	ror	r24
 5dc:	08 95       	ret
 5de:	12 16       	cp	r1, r18
 5e0:	13 06       	cpc	r1, r19
 5e2:	14 06       	cpc	r1, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	f2 cf       	rjmp	.-28     	; 0x5cc <__fp_split3+0xe>
 5e8:	46 95       	lsr	r20
 5ea:	f1 df       	rcall	.-30     	; 0x5ce <__fp_splitA>
 5ec:	08 c0       	rjmp	.+16     	; 0x5fe <__fp_splitA+0x30>
 5ee:	16 16       	cp	r1, r22
 5f0:	17 06       	cpc	r1, r23
 5f2:	18 06       	cpc	r1, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	f1 cf       	rjmp	.-30     	; 0x5da <__fp_splitA+0xc>
 5f8:	86 95       	lsr	r24
 5fa:	71 05       	cpc	r23, r1
 5fc:	61 05       	cpc	r22, r1
 5fe:	08 94       	sec
 600:	08 95       	ret

00000602 <__fp_zero>:
 602:	e8 94       	clt

00000604 <__fp_szero>:
 604:	bb 27       	eor	r27, r27
 606:	66 27       	eor	r22, r22
 608:	77 27       	eor	r23, r23
 60a:	cb 01       	movw	r24, r22
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__mulsf3>:
 610:	0e 94 1b 03 	call	0x636	; 0x636 <__mulsf3x>
 614:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_round>
 618:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_pscA>
 61c:	38 f0       	brcs	.+14     	; 0x62c <__mulsf3+0x1c>
 61e:	0e 94 c7 02 	call	0x58e	; 0x58e <__fp_pscB>
 622:	20 f0       	brcs	.+8      	; 0x62c <__mulsf3+0x1c>
 624:	95 23       	and	r25, r21
 626:	11 f0       	breq	.+4      	; 0x62c <__mulsf3+0x1c>
 628:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_inf>
 62c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_nan>
 630:	11 24       	eor	r1, r1
 632:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_szero>

00000636 <__mulsf3x>:
 636:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_split3>
 63a:	70 f3       	brcs	.-36     	; 0x618 <__mulsf3+0x8>

0000063c <__mulsf3_pse>:
 63c:	95 9f       	mul	r25, r21
 63e:	c1 f3       	breq	.-16     	; 0x630 <__mulsf3+0x20>
 640:	95 0f       	add	r25, r21
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	55 1f       	adc	r21, r21
 646:	62 9f       	mul	r22, r18
 648:	f0 01       	movw	r30, r0
 64a:	72 9f       	mul	r23, r18
 64c:	bb 27       	eor	r27, r27
 64e:	f0 0d       	add	r31, r0
 650:	b1 1d       	adc	r27, r1
 652:	63 9f       	mul	r22, r19
 654:	aa 27       	eor	r26, r26
 656:	f0 0d       	add	r31, r0
 658:	b1 1d       	adc	r27, r1
 65a:	aa 1f       	adc	r26, r26
 65c:	64 9f       	mul	r22, r20
 65e:	66 27       	eor	r22, r22
 660:	b0 0d       	add	r27, r0
 662:	a1 1d       	adc	r26, r1
 664:	66 1f       	adc	r22, r22
 666:	82 9f       	mul	r24, r18
 668:	22 27       	eor	r18, r18
 66a:	b0 0d       	add	r27, r0
 66c:	a1 1d       	adc	r26, r1
 66e:	62 1f       	adc	r22, r18
 670:	73 9f       	mul	r23, r19
 672:	b0 0d       	add	r27, r0
 674:	a1 1d       	adc	r26, r1
 676:	62 1f       	adc	r22, r18
 678:	83 9f       	mul	r24, r19
 67a:	a0 0d       	add	r26, r0
 67c:	61 1d       	adc	r22, r1
 67e:	22 1f       	adc	r18, r18
 680:	74 9f       	mul	r23, r20
 682:	33 27       	eor	r19, r19
 684:	a0 0d       	add	r26, r0
 686:	61 1d       	adc	r22, r1
 688:	23 1f       	adc	r18, r19
 68a:	84 9f       	mul	r24, r20
 68c:	60 0d       	add	r22, r0
 68e:	21 1d       	adc	r18, r1
 690:	82 2f       	mov	r24, r18
 692:	76 2f       	mov	r23, r22
 694:	6a 2f       	mov	r22, r26
 696:	11 24       	eor	r1, r1
 698:	9f 57       	subi	r25, 0x7F	; 127
 69a:	50 40       	sbci	r21, 0x00	; 0
 69c:	9a f0       	brmi	.+38     	; 0x6c4 <__mulsf3_pse+0x88>
 69e:	f1 f0       	breq	.+60     	; 0x6dc <__mulsf3_pse+0xa0>
 6a0:	88 23       	and	r24, r24
 6a2:	4a f0       	brmi	.+18     	; 0x6b6 <__mulsf3_pse+0x7a>
 6a4:	ee 0f       	add	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	bb 1f       	adc	r27, r27
 6aa:	66 1f       	adc	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	91 50       	subi	r25, 0x01	; 1
 6b2:	50 40       	sbci	r21, 0x00	; 0
 6b4:	a9 f7       	brne	.-22     	; 0x6a0 <__mulsf3_pse+0x64>
 6b6:	9e 3f       	cpi	r25, 0xFE	; 254
 6b8:	51 05       	cpc	r21, r1
 6ba:	80 f0       	brcs	.+32     	; 0x6dc <__mulsf3_pse+0xa0>
 6bc:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_inf>
 6c0:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_szero>
 6c4:	5f 3f       	cpi	r21, 0xFF	; 255
 6c6:	e4 f3       	brlt	.-8      	; 0x6c0 <__mulsf3_pse+0x84>
 6c8:	98 3e       	cpi	r25, 0xE8	; 232
 6ca:	d4 f3       	brlt	.-12     	; 0x6c0 <__mulsf3_pse+0x84>
 6cc:	86 95       	lsr	r24
 6ce:	77 95       	ror	r23
 6d0:	67 95       	ror	r22
 6d2:	b7 95       	ror	r27
 6d4:	f7 95       	ror	r31
 6d6:	e7 95       	ror	r30
 6d8:	9f 5f       	subi	r25, 0xFF	; 255
 6da:	c1 f7       	brne	.-16     	; 0x6cc <__mulsf3_pse+0x90>
 6dc:	fe 2b       	or	r31, r30
 6de:	88 0f       	add	r24, r24
 6e0:	91 1d       	adc	r25, r1
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret

000006ea <__udivmodhi4>:
 6ea:	aa 1b       	sub	r26, r26
 6ec:	bb 1b       	sub	r27, r27
 6ee:	51 e1       	ldi	r21, 0x11	; 17
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <__udivmodhi4_ep>

000006f2 <__udivmodhi4_loop>:
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	a6 17       	cp	r26, r22
 6f8:	b7 07       	cpc	r27, r23
 6fa:	10 f0       	brcs	.+4      	; 0x700 <__udivmodhi4_ep>
 6fc:	a6 1b       	sub	r26, r22
 6fe:	b7 0b       	sbc	r27, r23

00000700 <__udivmodhi4_ep>:
 700:	88 1f       	adc	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	5a 95       	dec	r21
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__udivmodhi4_loop>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	bc 01       	movw	r22, r24
 70e:	cd 01       	movw	r24, r26
 710:	08 95       	ret

00000712 <__umulhisi3>:
 712:	a2 9f       	mul	r26, r18
 714:	b0 01       	movw	r22, r0
 716:	b3 9f       	mul	r27, r19
 718:	c0 01       	movw	r24, r0
 71a:	a3 9f       	mul	r26, r19
 71c:	70 0d       	add	r23, r0
 71e:	81 1d       	adc	r24, r1
 720:	11 24       	eor	r1, r1
 722:	91 1d       	adc	r25, r1
 724:	b2 9f       	mul	r27, r18
 726:	70 0d       	add	r23, r0
 728:	81 1d       	adc	r24, r1
 72a:	11 24       	eor	r1, r1
 72c:	91 1d       	adc	r25, r1
 72e:	08 95       	ret

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
