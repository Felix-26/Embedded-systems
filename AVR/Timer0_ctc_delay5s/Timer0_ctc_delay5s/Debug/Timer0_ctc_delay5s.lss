
Timer0_ctc_delay5s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Delay_5s>:
		Delay_5s();
    }
}

void Delay_5s(void) {
	TCCR0A |= (1<<WGM01);			// to set timer0 to CTC mode WGM00,WGM01 need to be 0,1 respectively
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);			// setting a prescalar to reduce the clock speed for the timer (clk/64)
  86:	85 b5       	in	r24, 0x25	; 37
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);			// so for the timer0 clock speed it gets will be in this case 8MHz/64 = 125000Hz.
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;						// setting initial value from where counting to start to 0.
  92:	16 bc       	out	0x26, r1	; 38
	OCR0A = 200;					// maximum value till the counter should go, in every count the OCR0A register is checked if it is 200 OCF0A is set to 1.
  94:	88 ec       	ldi	r24, 0xC8	; 200
  96:	87 bd       	out	0x27, r24	; 39
	TIFR0 |= (1<<OCF0A);			// clear OCF0A bit of TIFR0 register. 
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	85 bb       	out	0x15, r24	; 21
	int count = 6250;				// no of iterations the counter should count
	for (int i=0;i<count;i++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <Delay_5s+0x32>
	{
		while(!(TIFR0 & (1<<OCF0A)));			// count till OCF0A register is not set.if set come out of loop
  a4:	a9 9b       	sbis	0x15, 1	; 21
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Delay_5s+0x24>
		TIFR0 |= (1<<OCF0A);					// clear the OCF0A bit of TIFR0 register.
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 bb       	out	0x15, r24	; 21
	TCCR0B |= (1<<CS01);			// so for the timer0 clock speed it gets will be in this case 8MHz/64 = 125000Hz.
	TCNT0 = 0;						// setting initial value from where counting to start to 0.
	OCR0A = 200;					// maximum value till the counter should go, in every count the OCR0A register is checked if it is 200 OCF0A is set to 1.
	TIFR0 |= (1<<OCF0A);			// clear OCF0A bit of TIFR0 register. 
	int count = 6250;				// no of iterations the counter should count
	for (int i=0;i<count;i++)
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	2a 36       	cpi	r18, 0x6A	; 106
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	38 07       	cpc	r19, r24
  b8:	ac f3       	brlt	.-22     	; 0xa4 <Delay_5s+0x24>
	{
		while(!(TIFR0 & (1<<OCF0A)));			// count till OCF0A register is not set.if set come out of loop
		TIFR0 |= (1<<OCF0A);					// clear the OCF0A bit of TIFR0 register.
	}
} 
  ba:	08 95       	ret

000000bc <main>:

void Delay_5s(void);

int main(void)
{
	DDRB |= (1<<DDB5);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		PORTB ^= (1<<PORTB5);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
		Delay_5s();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <Delay_5s>
  ce:	f9 cf       	rjmp	.-14     	; 0xc2 <main+0x6>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
