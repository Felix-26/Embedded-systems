
DC_motor3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motorCW>:
#define F_CPU 16000000UL                            
#include <avr/io.h>
#include <util/delay.h>

void motorCW(int delayT) {
	PORTC |= (1<<PORTC4);
  80:	28 b1       	in	r18, 0x08	; 8
  82:	20 61       	ori	r18, 0x10	; 16
  84:	28 b9       	out	0x08, r18	; 8
	PORTC &= ~(1<<PORTC5);
  86:	28 b1       	in	r18, 0x08	; 8
  88:	2f 7d       	andi	r18, 0xDF	; 223
  8a:	28 b9       	out	0x08, r18	; 8
	while(delayT){
  8c:	07 c0       	rjmp	.+14     	; 0x9c <motorCW+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e9       	ldi	r30, 0x9F	; 159
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <motorCW+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <motorCW+0x18>
  98:	00 00       	nop
		// _delay_ms func receives only integer const
		_delay_ms(1);
		delayT--;
  9a:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

void motorCW(int delayT) {
	PORTC |= (1<<PORTC4);
	PORTC &= ~(1<<PORTC5);
	while(delayT){
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	b9 f7       	brne	.-18     	; 0x8e <motorCW+0xe>
		// _delay_ms func receives only integer const
		_delay_ms(1);
		delayT--;
	}
}
  a0:	08 95       	ret

000000a2 <motorCCW>:

void motorCCW(int delayT) {
	PORTC |= (1<<PORTC5);
  a2:	28 b1       	in	r18, 0x08	; 8
  a4:	20 62       	ori	r18, 0x20	; 32
  a6:	28 b9       	out	0x08, r18	; 8
	PORTC &= ~(1<<PORTC4);
  a8:	28 b1       	in	r18, 0x08	; 8
  aa:	2f 7e       	andi	r18, 0xEF	; 239
  ac:	28 b9       	out	0x08, r18	; 8
	while(delayT){
  ae:	07 c0       	rjmp	.+14     	; 0xbe <motorCCW+0x1c>
  b0:	ef e9       	ldi	r30, 0x9F	; 159
  b2:	ff e0       	ldi	r31, 0x0F	; 15
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <motorCCW+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <motorCCW+0x18>
  ba:	00 00       	nop
		// _delay_ms func receives only integer const
		_delay_ms(1);
		delayT--;	
  bc:	01 97       	sbiw	r24, 0x01	; 1
}

void motorCCW(int delayT) {
	PORTC |= (1<<PORTC5);
	PORTC &= ~(1<<PORTC4);
	while(delayT){
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	b9 f7       	brne	.-18     	; 0xb0 <motorCCW+0xe>
		// _delay_ms func receives only integer const
		_delay_ms(1);
		delayT--;	
	}
}
  c2:	08 95       	ret

000000c4 <motorSTP>:

void motorSTP(int delayT) {
	PORTC &= ~(1<<PORTC4);
  c4:	28 b1       	in	r18, 0x08	; 8
  c6:	2f 7e       	andi	r18, 0xEF	; 239
  c8:	28 b9       	out	0x08, r18	; 8
	PORTC &= ~(1<<PORTC5);
  ca:	28 b1       	in	r18, 0x08	; 8
  cc:	2f 7d       	andi	r18, 0xDF	; 223
  ce:	28 b9       	out	0x08, r18	; 8
	while(delayT) {
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <motorSTP+0x1c>
  d2:	ef e9       	ldi	r30, 0x9F	; 159
  d4:	ff e0       	ldi	r31, 0x0F	; 15
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <motorSTP+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <motorSTP+0x18>
  dc:	00 00       	nop
		_delay_ms(1);
		delayT--;
  de:	01 97       	sbiw	r24, 0x01	; 1
}

void motorSTP(int delayT) {
	PORTC &= ~(1<<PORTC4);
	PORTC &= ~(1<<PORTC5);
	while(delayT) {
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	b9 f7       	brne	.-18     	; 0xd2 <motorSTP+0xe>
		_delay_ms(1);
		delayT--;
	}
}
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{
    DDRC |= (1<<DDC4);
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC5);
  ec:	87 b1       	in	r24, 0x07	; 7
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	87 b9       	out	0x07, r24	; 7
    while (1) 
    {
		motorCW(2500);
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	0e 94 40 00 	call	0x80	; 0x80 <motorCW>
		motorSTP(1000);
  fa:	88 ee       	ldi	r24, 0xE8	; 232
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	0e 94 62 00 	call	0xc4	; 0xc4 <motorSTP>
		motorCCW(1500);
 102:	8c ed       	ldi	r24, 0xDC	; 220
 104:	95 e0       	ldi	r25, 0x05	; 5
 106:	0e 94 51 00 	call	0xa2	; 0xa2 <motorCCW>
		motorSTP(1200);	
 10a:	80 eb       	ldi	r24, 0xB0	; 176
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	0e 94 62 00 	call	0xc4	; 0xc4 <motorSTP>
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0xc>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
