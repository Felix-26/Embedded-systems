
pwm_fast_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000804  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dim_to_bright>:
#include <util/delay.h>


void dim_to_bright() {
	int i;
	for(i=0;i<255;i++){
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0b c0       	rjmp	.+22     	; 0x9c <dim_to_bright+0x1c>
		OCR0A = i;
  86:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	39 ef       	ldi	r19, 0xF9	; 249
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <dim_to_bright+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <dim_to_bright+0x18>
  98:	00 00       	nop
#include <util/delay.h>


void dim_to_bright() {
	int i;
	for(i=0;i<255;i++){
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	91 05       	cpc	r25, r1
  a0:	94 f3       	brlt	.-28     	; 0x86 <dim_to_bright+0x6>
		OCR0A = i;
		_delay_ms(20);
	}
}
  a2:	08 95       	ret

000000a4 <bright_to_dim>:

void bright_to_dim() {
	int i;
	for(i=255;i>=0;i--) {
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <bright_to_dim+0x1c>
		OCR0A = i;
  aa:	87 bd       	out	0x27, r24	; 39
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	39 ef       	ldi	r19, 0xF9	; 249
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <bright_to_dim+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <bright_to_dim+0x18>
  bc:	00 00       	nop
	}
}

void bright_to_dim() {
	int i;
	for(i=255;i>=0;i--) {
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	99 23       	and	r25, r25
  c2:	9c f7       	brge	.-26     	; 0xaa <bright_to_dim+0x6>
		OCR0A = i;
		_delay_ms(20);
	}
}
  c4:	08 95       	ret

000000c6 <main>:
int main(void)
{
	DDRD |= (1<<DDD6);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB5);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5

	while(1) {
		TCCR0A |= (1<<WGM01);
  d8:	84 b5       	in	r24, 0x24	; 36
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= (1<<WGM00);
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= (1<<COM0A1);
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (1<<CS01);
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	85 bd       	out	0x25, r24	; 37
		TCCR0B |= (1<<CS00);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	85 bd       	out	0x25, r24	; 37
		dim_to_bright();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <dim_to_bright>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 e6       	ldi	r24, 0x69	; 105
  fe:	98 e1       	ldi	r25, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x3a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x44>
 10a:	00 00       	nop
		_delay_ms(500);
		bright_to_dim();
 10c:	0e 94 52 00 	call	0xa4	; 0xa4 <bright_to_dim>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	98 e1       	ldi	r25, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x50>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x5a>
 120:	00 00       	nop
		_delay_ms(500);
		OCR0A=0;
 122:	17 bc       	out	0x27, r1	; 39
 124:	d9 cf       	rjmp	.-78     	; 0xd8 <main+0x12>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
