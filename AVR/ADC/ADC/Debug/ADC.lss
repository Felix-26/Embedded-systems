
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000032c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f70  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ed  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071e  00000000  00000000  00001d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c2  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  8e:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:

#define F_CPU 16000000UL
#include <avr/io.h>

void adc_init(void) {
	ADMUX = (1<<REFS0 | 1<<REFS1);
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0); // PRESCALAR 128
  a4:	80 81       	ld	r24, Z
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <adc_read>:
}

uint16_t adc_read(uint16_t channel) {
	channel &= 0x07;
  ac:	87 70       	andi	r24, 0x07	; 7
  ae:	99 27       	eor	r25, r25
	ADCSRA |= 1<<ADSC;
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	90 64       	ori	r25, 0x40	; 64
  b8:	90 83       	st	Z, r25
	ADMUX = (ADMUX & 0XF8) | channel;
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	98 7f       	andi	r25, 0xF8	; 248
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
  c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ca:	86 fd       	sbrc	r24, 6
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <adc_read+0x1a>
	return (ADCL | (ADCH << 8));
  ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	98 2f       	mov	r25, r24
  da:	88 27       	eor	r24, r24
  dc:	82 2b       	or	r24, r18
  de:	08 95       	ret

000000e0 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_enable_pulse+0x8>
  ec:	00 00       	nop
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_enable_pulse+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_enable_pulse+0x1e>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <lcd_send_nibble>:
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	93 7c       	andi	r25, 0xC3	; 195
 106:	9b b9       	out	0x0b, r25	; 11
 108:	83 ff       	sbrs	r24, 3
 10a:	03 c0       	rjmp	.+6      	; 0x112 <lcd_send_nibble+0x10>
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	94 60       	ori	r25, 0x04	; 4
 110:	9b b9       	out	0x0b, r25	; 11
 112:	82 ff       	sbrs	r24, 2
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_send_nibble+0x1a>
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	81 ff       	sbrs	r24, 1
 11e:	03 c0       	rjmp	.+6      	; 0x126 <lcd_send_nibble+0x24>
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	90 61       	ori	r25, 0x10	; 16
 124:	9b b9       	out	0x0b, r25	; 11
 126:	80 ff       	sbrs	r24, 0
 128:	03 c0       	rjmp	.+6      	; 0x130 <lcd_send_nibble+0x2e>
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_enable_pulse>
 134:	08 95       	ret

00000136 <lcd_send_byte>:
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	21 f4       	brne	.+8      	; 0x146 <lcd_send_byte+0x10>
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 61       	ori	r24, 0x10	; 16
 142:	85 b9       	out	0x05, r24	; 5
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_send_byte+0x16>
 146:	85 b1       	in	r24, 0x05	; 5
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	8c 2f       	mov	r24, r28
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 156:	8c 2f       	mov	r24, r28
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_cmd>:
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_send_byte>
 16c:	c1 50       	subi	r28, 0x01	; 1
 16e:	c2 30       	cpi	r28, 0x02	; 2
 170:	30 f4       	brcc	.+12     	; 0x17e <lcd_cmd+0x1c>
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_cmd+0x14>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_cmd+0x1a>
 17c:	00 00       	nop
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <lcd_data>:
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_send_byte>
 188:	08 95       	ret

0000018a <lcd_set_cursor>:
 18a:	88 23       	and	r24, r24
 18c:	11 f0       	breq	.+4      	; 0x192 <lcd_set_cursor+0x8>
 18e:	90 e4       	ldi	r25, 0x40	; 64
 190:	01 c0       	rjmp	.+2      	; 0x194 <lcd_set_cursor+0xa>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	86 2f       	mov	r24, r22
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	89 0f       	add	r24, r25
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 1a0:	08 95       	ret

000001a2 <lcd_print>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_print+0xe>
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 1b0:	88 81       	ld	r24, Y
 1b2:	81 11       	cpse	r24, r1
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <lcd_print+0x8>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <lcd_clear>:
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 1c2:	08 95       	ret

000001c4 <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 1c4:	84 b1       	in	r24, 0x04	; 4
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8c 63       	ori	r24, 0x3C	; 60
 1d4:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	89 ef       	ldi	r24, 0xF9	; 249
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <lcd_init+0x18>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x22>
 1e6:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 1fa:	8f e1       	ldi	r24, 0x1F	; 31
 1fc:	9e e4       	ldi	r25, 0x4E	; 78
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x3a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x40>
 204:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	87 e5       	ldi	r24, 0x57	; 87
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x4c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x52>
 216:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 21e:	87 e5       	ldi	r24, 0x57	; 87
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x5e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x64>
 228:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 81 00 	call	0x102	; 0x102 <lcd_send_nibble>
 230:	87 e5       	ldi	r24, 0x57	; 87
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_init+0x70>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_init+0x76>
 23a:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_cmd>
 25a:	08 95       	ret

0000025c <lcd_print_uint16>:
}

void lcd_print_uint16(uint16_t v)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	if (v >= 10)
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	91 05       	cpc	r25, r1
 266:	68 f0       	brcs	.+26     	; 0x282 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 268:	9c 01       	movw	r18, r24
 26a:	ad ec       	ldi	r26, 0xCD	; 205
 26c:	bc ec       	ldi	r27, 0xCC	; 204
 26e:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 282:	9e 01       	movw	r18, r28
 284:	ad ec       	ldi	r26, 0xCD	; 205
 286:	bc ec       	ldi	r27, 0xCC	; 204
 288:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	9c 01       	movw	r18, r24
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	9e 01       	movw	r18, r28
 2b0:	28 1b       	sub	r18, r24
 2b2:	39 0b       	sbc	r19, r25
 2b4:	c9 01       	movw	r24, r18
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <main>:
#include "Icd.h"
#include "adc.h"

int main(void) {
    uint16_t adc_value;
	lcd_init();
 2c2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_init>
	adc_init();
 2c6:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
	while (1) 
    {
		lcd_clear();
 2ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_clear>
		adc_value = adc_read(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 2d6:	ec 01       	movw	r28, r24
		lcd_set_cursor(0,0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_cursor>
		lcd_print("ADC value : ");
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_print>
		lcd_print_uint16(adc_value);
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_print_uint16>
		lcd_set_cursor(1,0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_cursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	83 ed       	ldi	r24, 0xD3	; 211
 2fa:	90 e3       	ldi	r25, 0x30	; 48
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x3a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x44>
 306:	00 00       	nop
 308:	e0 cf       	rjmp	.-64     	; 0x2ca <main+0x8>

0000030a <__umulhisi3>:
 30a:	a2 9f       	mul	r26, r18
 30c:	b0 01       	movw	r22, r0
 30e:	b3 9f       	mul	r27, r19
 310:	c0 01       	movw	r24, r0
 312:	a3 9f       	mul	r26, r19
 314:	70 0d       	add	r23, r0
 316:	81 1d       	adc	r24, r1
 318:	11 24       	eor	r1, r1
 31a:	91 1d       	adc	r25, r1
 31c:	b2 9f       	mul	r27, r18
 31e:	70 0d       	add	r23, r0
 320:	81 1d       	adc	r24, r1
 322:	11 24       	eor	r1, r1
 324:	91 1d       	adc	r25, r1
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
