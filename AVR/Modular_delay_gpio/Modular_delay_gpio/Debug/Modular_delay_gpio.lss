
Modular_delay_gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000825  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000357  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "my_delay.h"
#include "my_gpio.h"

int main(void)
{
    gpio_init();
  80:	0e 94 68 00 	call	0xd0	; 0xd0 <gpio_init>
	timer0_init();
  84:	0e 94 4b 00 	call	0x96	; 0x96 <timer0_init>
    while (1) 
    {
		toggle_gpio();
  88:	0e 94 6c 00 	call	0xd8	; 0xd8 <toggle_gpio>
		delay(2000);
  8c:	80 ed       	ldi	r24, 0xD0	; 208
  8e:	97 e0       	ldi	r25, 0x07	; 7
  90:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay>
  94:	f9 cf       	rjmp	.-14     	; 0x88 <main+0x8>

00000096 <timer0_init>:
 */ 

#include <avr/io.h>

void timer0_init() {
	TCCR0A |= (1<<WGM01);
  96:	84 b5       	in	r24, 0x24	; 36
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
  9c:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249;
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1<<CS00);
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 bd       	out	0x25, r24	; 37
	TIFR0 |= (1<<OCF0A);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	08 95       	ret

000000b6 <delay>:
}

void delay(uint16_t ms) {
	while(ms--) {
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <delay+0xe>
		while(!(TIFR0 & (1<<OCF0A)));
  b8:	a9 9b       	sbis	0x15, 1	; 21
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <delay+0x2>
		TIFR0 |= (1<<OCF0A);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	85 bb       	out	0x15, r24	; 21
	TCCR0B |= (1<<CS01);
	TIFR0 |= (1<<OCF0A);
}

void delay(uint16_t ms) {
	while(ms--) {
  c2:	c9 01       	movw	r24, r18
  c4:	9c 01       	movw	r18, r24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	89 2b       	or	r24, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <delay+0x2>
		while(!(TIFR0 & (1<<OCF0A)));
		TIFR0 |= (1<<OCF0A);
	}
  ce:	08 95       	ret

000000d0 <gpio_init>:
 */ 

#include <avr/io.h>

void gpio_init(void) {
	DDRB |= ( 1<<DDB1 | 1<<DDB2 | 1<<DDB3 | 1<<DDB4 | 1<<DDB5 );
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	8e 63       	ori	r24, 0x3E	; 62
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	08 95       	ret

000000d8 <toggle_gpio>:
}

void toggle_gpio() {
	PORTB ^= ( 1<<PORTB1 | 1<<PORTB2 | 1<<PORTB3 | 1<<PORTB4 | 1<<PORTB5 );
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	8e e3       	ldi	r24, 0x3E	; 62
  dc:	89 27       	eor	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
