
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079d  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006b  00000000  00000000  0000179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8e:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_TX>:
#include <avr/io.h>
#include <util/delay.h>
#include <string.h>

void usart_TX(unsigned char data) {
	while(!(UCSR0A & (1<<UDRE0)));
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <usart_TX>
	UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <usart_init>:
}

void usart_init() {
	UBRR0L = 103;
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<TXEN0);
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01 | 1<<UCSZ00);
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	a8 97       	sbiw	r28, 0x28	; 40
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	char str[]	= "Hello ,this message is from ATmega328.\n";
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	usart_init();
  de:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_init>
    while(1) {
		for (int i=0;i<strlen(str);i++)
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	0b c0       	rjmp	.+22     	; 0xfe <main+0x46>
		{
			usart_TX(str[i]);
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ec 0f       	add	r30, r28
  ee:	fd 1f       	adc	r31, r29
  f0:	e0 0f       	add	r30, r16
  f2:	f1 1f       	adc	r31, r17
  f4:	80 81       	ld	r24, Z
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <usart_TX>
int main(void)
{
	char str[]	= "Hello ,this message is from ATmega328.\n";
	usart_init();
    while(1) {
		for (int i=0;i<strlen(str);i++)
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	de 01       	movw	r26, r28
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	fd 01       	movw	r30, r26
 104:	01 90       	ld	r0, Z+
 106:	00 20       	and	r0, r0
 108:	e9 f7       	brne	.-6      	; 0x104 <main+0x4c>
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	ea 1b       	sub	r30, r26
 10e:	fb 0b       	sbc	r31, r27
 110:	0e 17       	cp	r16, r30
 112:	1f 07       	cpc	r17, r31
 114:	48 f3       	brcs	.-46     	; 0xe8 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x64>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x6e>
 126:	00 00       	nop
 128:	dc cf       	rjmp	.-72     	; 0xe2 <main+0x2a>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
